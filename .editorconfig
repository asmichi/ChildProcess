# EditorConfig is awesome: http://EditorConfig.org

# top-most EditorConfig file
root = true

[*]
indent_style = space
charset = utf-8
end_of_line = lf

# Text files
[*.{txt,md}]
trim_trailing_whitespace = true
insert_final_newline = true

# Code files
# Code files no longer need BOMs, now that:
# - VS2017 supports .editorconfig
# - cl supports /source-charset:utf-8
# - pwsh treats script files as UTF-8 by default
[*.{cpp,c,cs,csx,fs,fsx,h,hpp,vb,vbx,ps1,psm1}]
indent_size = 4
trim_trailing_whitespace = true
insert_final_newline = true

# Linux Shell Scripts
[*.sh]
indent_size = 4
end_of_line = lf
trim_trailing_whitespace = true
insert_final_newline = true

[Makefile]
indent_style = tab
end_of_line = lf
trim_trailing_whitespace = true
insert_final_newline = true

# XML Files
[*.{nuspec,props,ruleset,targets,xaml}]
indent_size = 2
trim_trailing_whitespace = true

# Visual-Studio-generated XML files
[*.{csproj,fsproj,resx,shproj,vbproj,vcxproj,vcxproj.filters,vsct,vsixmanifest}]
indent_size = 2
charset = utf-8-bom
end_of_line = crlf
trim_trailing_whitespace = true

# Visual Studio Solution file
[*.{sln}]
indent_style = tab
charset = utf-8-bom
end_of_line = crlf
trim_trailing_whitespace = true

# JSON, YAML files
[*.{json,yml,yaml}]
indent_size = 2
trim_trailing_whitespace = true

# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference
[*.{cs,vb}]
# Organize usings
dotnet_sort_system_directives_first = true

# this. preferences
dotnet_style_qualification_for_field = false:suggestion
dotnet_style_qualification_for_property = false:suggestion
dotnet_style_qualification_for_method = false:suggestion
dotnet_style_qualification_for_event = false:suggestion

# Language keywords vs BCL types preferences
dotnet_style_predefined_type_for_locals_parameters_members = true:suggestion
dotnet_style_predefined_type_for_member_access = true:suggestion

# Parentheses preferences
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity:silent
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity:silent
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity:silent
dotnet_style_parentheses_in_other_operators = never_if_unnecessary:silent

# Modifier preferences
dotnet_style_require_accessibility_modifiers = for_non_interface_members:silent
dotnet_style_readonly_field = true:suggestion

# Expression-level preferences
dotnet_style_object_initializer = true:suggestion
dotnet_style_collection_initializer = true:suggestion
dotnet_style_explicit_tuple_names = true:suggestion
dotnet_style_null_propagation = true:suggestion
dotnet_style_coalesce_expression = true:suggestion
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:silent
dotnet_prefer_inferred_tuple_names = true:suggestion
dotnet_prefer_inferred_anonymous_type_member_names = true:suggestion
dotnet_style_prefer_auto_properties = true:silent
dotnet_style_prefer_conditional_expression_over_assignment = true:silent
dotnet_style_prefer_conditional_expression_over_return = true:silent

# .NET code quality settings
dotnet_code_quality_unused_parameters = non_public:suggestion
dotnet_code_quality.CA1711.allowed_suffixes = Flags

dotnet_diagnostic.CA1303.severity = none # Do not pass literals as localized parameters
dotnet_diagnostic.CA1838.severity = none # Avoid 'StringBuilder' parameters for P/Invokes.
dotnet_diagnostic.CA2000.severity = none # Dispose objects before losing scope
# Workaround for https://github.com/dotnet/sdk/issues/1088.
dotnet_diagnostic.CA5393.severity = none # Use of unsafe DllImportSearchPath value AssemblyDirectory

dotnet_diagnostic.CA1000.severity = warning # Do not declare static members on generic types
dotnet_diagnostic.CA1001.severity = warning # Types that own disposable fields should be disposable
dotnet_diagnostic.CA1010.severity = warning # Collections should implement generic interface
dotnet_diagnostic.CA1016.severity = warning # Mark assemblies with assembly version
dotnet_diagnostic.CA1018.severity = warning # Mark attributes with AttributeUsageAttribute
dotnet_diagnostic.CA1028.severity = warning # Enum Storage should be Int32
dotnet_diagnostic.CA1030.severity = warning # Use events where appropriate
dotnet_diagnostic.CA1031.severity = warning # Do not catch general exception types
dotnet_diagnostic.CA1032.severity = warning # Implement standard exception constructors
dotnet_diagnostic.CA1034.severity = warning # Nested types should not be visible
dotnet_diagnostic.CA1036.severity = warning # Override methods on comparable types
dotnet_diagnostic.CA1040.severity = warning # Avoid empty interfaces
dotnet_diagnostic.CA1041.severity = warning # Provide ObsoleteAttribute message
dotnet_diagnostic.CA1043.severity = warning # Use Integral Or String Argument For Indexers
dotnet_diagnostic.CA1044.severity = warning # Properties should not be write only
dotnet_diagnostic.CA1051.severity = warning # Do not declare visible instance fields
dotnet_diagnostic.CA1052.severity = warning # Static holder types should be Static or NotInheritable
dotnet_diagnostic.CA1054.severity = warning # Uri parameters should not be strings
dotnet_diagnostic.CA1055.severity = warning # Uri return values should not be strings
dotnet_diagnostic.CA1056.severity = warning # Uri properties should not be strings
dotnet_diagnostic.CA1058.severity = warning # Types should not extend certain base types
dotnet_diagnostic.CA1061.severity = warning # Do not hide base class methods
dotnet_diagnostic.CA1063.severity = warning # Implement IDisposable Correctly
dotnet_diagnostic.CA1064.severity = warning # Exceptions should be public
dotnet_diagnostic.CA1065.severity = warning # Do not raise exceptions in unexpected locations
dotnet_diagnostic.CA1066.severity = warning # Type {0} should implement IEquatable<T> because it overrides Equals
dotnet_diagnostic.CA1067.severity = warning # Override Object.Equals(object) when implementing IEquatable<T>
dotnet_diagnostic.CA1068.severity = warning # CancellationToken parameters must come last
dotnet_diagnostic.CA1200.severity = warning # Avoid using cref tags with a prefix
dotnet_diagnostic.CA1304.severity = warning # Specify CultureInfo
dotnet_diagnostic.CA1305.severity = warning # Specify IFormatProvider
dotnet_diagnostic.CA1307.severity = warning # Specify StringComparison
dotnet_diagnostic.CA1308.severity = warning # Normalize strings to uppercase
dotnet_diagnostic.CA1401.severity = warning # P/Invokes should not be visible
dotnet_diagnostic.CA1507.severity = warning # Use nameof to express symbol names
dotnet_diagnostic.CA1707.severity = warning # Identifiers should not contain underscores
dotnet_diagnostic.CA1710.severity = warning # Identifiers should have correct suffix
dotnet_diagnostic.CA1714.severity = warning # Flags enums should have plural names
dotnet_diagnostic.CA1715.severity = warning # Identifiers should have correct prefix
dotnet_diagnostic.CA1716.severity = warning # Identifiers should not match keywords
dotnet_diagnostic.CA1717.severity = warning # Only FlagsAttribute enums should have plural names
dotnet_diagnostic.CA1720.severity = warning # Identifier contains type name
dotnet_diagnostic.CA1721.severity = warning # Property names should not match get methods
dotnet_diagnostic.CA1724.severity = warning # Type names should not match namespaces
dotnet_diagnostic.CA1801.severity = warning # Review unused parameters
dotnet_diagnostic.CA1802.severity = warning # Use literals where appropriate
dotnet_diagnostic.CA1806.severity = warning # Do not ignore method results
dotnet_diagnostic.CA1810.severity = warning # Initialize reference type static fields inline
dotnet_diagnostic.CA1812.severity = warning # Avoid uninstantiated internal classes
dotnet_diagnostic.CA1814.severity = warning # Prefer jagged arrays over multidimensional
dotnet_diagnostic.CA1815.severity = warning # Override equals and operator equals on value types
dotnet_diagnostic.CA1816.severity = warning # Dispose methods should call SuppressFinalize
dotnet_diagnostic.CA1819.severity = warning # Properties should not return arrays
dotnet_diagnostic.CA1820.severity = warning # Test for empty strings using string length
dotnet_diagnostic.CA1821.severity = warning # Remove empty Finalizers
dotnet_diagnostic.CA1822.severity = warning # Mark members as static
dotnet_diagnostic.CA1823.severity = warning # Avoid unused private fields
dotnet_diagnostic.CA1824.severity = warning # Mark assemblies with NeutralResourcesLanguageAttribute
dotnet_diagnostic.CA1825.severity = warning # Avoid zero-length array allocations.
dotnet_diagnostic.CA1826.severity = warning # Do not use Enumerable methods on indexable collections. Instead use the collection directly
dotnet_diagnostic.CA2002.severity = warning # Do not lock on objects with weak identity
dotnet_diagnostic.CA2007.severity = warning # Do not directly await a Task
dotnet_diagnostic.CA2008.severity = warning # Do not create tasks without passing a TaskScheduler
dotnet_diagnostic.CA2009.severity = warning # Do not call ToImmutableCollection on an ImmutableCollection value
dotnet_diagnostic.CA2010.severity = warning # Always consume the value returned by methods marked with PreserveSigAttribute
dotnet_diagnostic.CA2101.severity = warning # Specify marshaling for P/Invoke string arguments
dotnet_diagnostic.CA2119.severity = warning # Seal methods that satisfy private interfaces
dotnet_diagnostic.CA2153.severity = warning # Do Not Catch Corrupted State Exceptions
dotnet_diagnostic.CA2200.severity = warning # Rethrow to preserve stack details.
dotnet_diagnostic.CA2207.severity = warning # Initialize value type static fields inline
dotnet_diagnostic.CA2208.severity = warning # Instantiate argument exceptions correctly
dotnet_diagnostic.CA2211.severity = warning # Non-constant fields should not be visible
dotnet_diagnostic.CA2214.severity = warning # Do not call overridable methods in constructors
dotnet_diagnostic.CA2216.severity = warning # Disposable types should declare finalizer
dotnet_diagnostic.CA2218.severity = warning # Override GetHashCode on overriding Equals
dotnet_diagnostic.CA2219.severity = warning # Do not raise exceptions in finally clauses
dotnet_diagnostic.CA2224.severity = warning # Override Equals on overloading operator equals
dotnet_diagnostic.CA2225.severity = warning # Operator overloads have named alternates
dotnet_diagnostic.CA2226.severity = warning # Operators should have symmetrical overloads
dotnet_diagnostic.CA2227.severity = warning # Collection properties should be read only
dotnet_diagnostic.CA2229.severity = warning # Implement serialization constructors
dotnet_diagnostic.CA2231.severity = warning # Overload operator equals on overriding value type Equals
dotnet_diagnostic.CA2234.severity = warning # Pass system uri objects instead of strings
dotnet_diagnostic.CA2235.severity = warning # Mark all non-serializable fields
dotnet_diagnostic.CA2237.severity = warning # Mark ISerializable types with serializable
dotnet_diagnostic.CA2241.severity = warning # Provide correct arguments to formatting methods
dotnet_diagnostic.CA2242.severity = warning # Test for NaN correctly
dotnet_diagnostic.CA2243.severity = warning # Attribute string literals should parse correctly
dotnet_diagnostic.CA2244.severity = warning # Do not duplicate indexed element initializations
dotnet_diagnostic.CA3075.severity = warning # Insecure DTD processing in XML
dotnet_diagnostic.CA3076.severity = warning # Insecure XSLT script processing.
dotnet_diagnostic.CA3077.severity = warning # Insecure Processing in API Design, XmlDocument and XmlTextReader
dotnet_diagnostic.CA3147.severity = warning # Mark Verb Handlers With Validate Antiforgery Token
dotnet_diagnostic.CA5350.severity = warning # Do Not Use Weak Cryptographic Algorithms
dotnet_diagnostic.CA5351.severity = warning # Do Not Use Broken Cryptographic Algorithms
dotnet_diagnostic.CA5359.severity = warning # Do Not Disable Certificate Validation
dotnet_diagnostic.CA5360.severity = warning # Do Not Call Dangerous Methods In Deserialization
dotnet_diagnostic.CA5361.severity = warning # Do Not Disable SChannel Use of Strong Crypto
dotnet_diagnostic.CA5363.severity = warning # Do Not Disable Request Validation
dotnet_diagnostic.CA5364.severity = warning # Do Not Use Deprecated Security Protocols
dotnet_diagnostic.CA9999.severity = warning # Analyzer version mismatch

###############################
# Naming Conventions          #
###############################

# Constants are PascalCase
dotnet_naming_rule.constants_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.constants_should_be_pascal_case.symbols = constants
dotnet_naming_rule.constants_should_be_pascal_case.style = constant_style

dotnet_naming_symbols.constants.applicable_kinds = field, local
dotnet_naming_symbols.constants.required_modifiers = const

dotnet_naming_style.constant_style.capitalization = pascal_case

# Public instance fields are PascalCase
dotnet_naming_rule.public_instance_fields_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.public_instance_fields_should_be_pascal_case.symbols = public_instance_fields
dotnet_naming_rule.public_instance_fields_should_be_pascal_case.style = public_instance_field_style

dotnet_naming_symbols.public_instance_fields.applicable_kinds = field
dotnet_naming_symbols.public_instance_fields.applicable_accessibilities = public

dotnet_naming_style.public_instance_field_style.capitalization = pascal_case

# Non-public instance fields are camelCase and start with _
dotnet_naming_rule.instance_fields_should_be_camel_case.severity = suggestion
dotnet_naming_rule.instance_fields_should_be_camel_case.symbols = instance_fields
dotnet_naming_rule.instance_fields_should_be_camel_case.style = instance_field_style

dotnet_naming_symbols.instance_fields.applicable_kinds = field
dotnet_naming_symbols.instance_fields.applicable_accessibilities = protected, internal, protected_internal, private_protected

dotnet_naming_style.instance_field_style.capitalization = camel_case
dotnet_naming_style.instance_field_style.required_prefix = _

###############################
# C# Coding Conventions       #
###############################

[*.cs]
# var preferences
csharp_style_var_for_built_in_types = true:silent
csharp_style_var_when_type_is_apparent = true:silent
csharp_style_var_elsewhere = true:silent

# Expression-bodied members
csharp_style_expression_bodied_methods = false:silent
csharp_style_expression_bodied_constructors = false:silent
csharp_style_expression_bodied_operators = false:silent
csharp_style_expression_bodied_properties = true:suggestion
csharp_style_expression_bodied_indexers = true:suggestion
csharp_style_expression_bodied_accessors = true:suggestion
csharp_style_expression_bodied_lambdas = true:silent
csharp_style_expression_bodied_local_functions = false:silent

# Pattern matching preferences
csharp_style_pattern_matching_over_is_with_cast_check = true:suggestion
csharp_style_pattern_matching_over_as_with_null_check = true:suggestion

# Null-checking preferences
csharp_style_throw_expression = true:suggestion
csharp_style_conditional_delegate_call = true:suggestion

# Modifier preferences
csharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async:suggestion

# Expression-level preferences
csharp_prefer_braces = true:warning
csharp_style_deconstructed_variable_declaration = true:suggestion
csharp_prefer_simple_default_expression = true:suggestion
csharp_style_pattern_local_over_anonymous_function = true:suggestion
csharp_style_inlined_variable_declaration = true:suggestion

###############################
# C# Formatting Rules         #
###############################

# New line preferences
csharp_new_line_before_open_brace = all
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_between_query_expression_clauses = true

# Indentation preferences
csharp_indent_case_contents = true
csharp_indent_switch_labels = true
csharp_indent_labels = no_change

# Space preferences
csharp_space_after_cast = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_parentheses = false
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_around_binary_operators = before_and_after
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false

# Wrapping preferences
csharp_preserve_single_line_statements = false
csharp_preserve_single_line_blocks = true